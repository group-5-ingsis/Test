plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
    id 'org.jlleitschuh.gradle.ktlint' version '11.5.0'
    id 'org.jetbrains.kotlinx.kover' version '0.7.3'
}

group = 'com.ingsis.Snippet'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.17.1'


    annotationProcessor('org.projectlombok:lombok:1.18.34')
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation("org.postgresql:postgresql")
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation('org.mockito.kotlin:mockito-kotlin:5.4.0')

    testImplementation 'org.amshove.kluent:kluent:1.73'
    testImplementation("com.h2database:h2")

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    runtimeOnly 'org.postgresql:postgresql'
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

kover {
    useJacoco()
}

koverReport {
    verify {
        rule {
            bound {
                minValue = 80
            }
        }
        filters {
            excludes {
                packages("config")
                classes("com.ingsis.parse.Snippet.kt")
            }
        }
    }

    defaults {
        html {
            onCheck = true
        }
    }
}


ktlint {
    disabledRules = ['no-wildcard-imports', 'max-line-length']
}

test {
    jvmArgs("-XX:+EnableDynamicAgentLoading", "-Djdk.instrument.traceUsage", "-Xshare:off")
}

tasks.named('test') {
    useJUnitPlatform()
}